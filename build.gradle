plugins {
    id 'java'
    id 'groovy'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'org.springframework.boot' version '2.1.7.RELEASE'
    id 'org.unbroken-dome.test-sets' version '2.1.1'

    // add generatr-gradle plugin
    id 'com.github.hauner.openapi-generatr' version '1.0.0.M5'
}

group = 'com.github.hauner'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral ()
}

testSets {
    testInt
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
    testImplementation 'org.spockframework:spock-spring:1.3-groovy-2.5'
}


// configure an openapi-generatr inside the 'openapiGeneratr' configuration by adding a nested
// configuration with the name of the generatr and its options inside it.
//
// ... using 'spring' and 'json'.
openapiGeneratr {

    // the path to the open api yaml file. Usually the same for all generatrs.
    apiPath "${projectDir}/src/api/openapi.yaml"

    // based on the name of a generatr configuration the plugin creates a gradle task with name
    // "generate${name of generator}"  (in this case "generateSpring") to run the generatr.
    spring {
        // the spring generatr dependency
        generatr 'com.github.hauner.openapi:openapi-generatr-spring:1.0.0.M7'

        // setting api path inside a generatr configuration override the one at the top.
        // apiPath "${projectDir}/src/api/openapi.yaml"

        // the destination folder for generating interfaces & models. This is the parent of the
        // {package-name} folder tree configured in the mapping file.
        targetDir "$projectDir/build/openapi"

        // file name of the mapping yaml configuration file. Note that the yaml file name must end
        // with either {@code .yaml} or {@code .yml}.
        mapping "$projectDir/openapi-generatr-spring.yaml"

        // show warnings from the open api parser.
        showWarnings true
    }

    // applying the rule described above the task to run this one is "generateJson".
    json {
        // the json generatr dependency
        generatr 'com.github.hauner.openapi:openapi-generatr-json:1.0.0.M2'

        targetDir "$buildDir/json"
    }

}

// add the targetDir of the generatr as additional source folder to java.
sourceSets {
    main {
        java {
            // add generated files
            srcDir 'build/openapi'
        }

        resources {
            srcDir "$buildDir/json"
        }
    }
}

// generate api before compiling
compileJava.dependsOn ('generateSpring')
processResources.dependsOn ('generateJson')

check.dependsOn testInt
