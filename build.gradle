buildscript {
  dependencies {
    // add generatr-spring
    classpath "com.github.hauner.openapi:openapi-generatr-spring"
  }
}

plugins {
    id 'org.springframework.boot' version '2.1.7.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'

    // add generatr-gradle plugin
    // note: currently this works only inside the openapi-generatr-dev project because the
    // plugin is not yet published to https://plugins.gradle.org/
    id 'com.github.hauner.openapi.openapiGeneratr' version '0.1-SNAPSHOT'
}

group = 'com.github.hauner'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral ()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

// options of openapi-generatr-spring, this maps directly on the options class of the generatr.
// In this case: com.github.hauner.openapi.spring.generatr.ApiOptions
generatrSpring {
    // the path to the open api yaml file.
    apiPath = "$projectDir/src/api/openapi.yaml"

    // the destination folder for generating interfaces & models. This is the parent of the
    // {packageName} folder tree.
    targetDir = "$projectDir/build/openapi"

    // the root package of the generated interfaces/model. The package folder tree will be created
    // inside {targetDir}. Interfaces and models will be placed into the "api" and "model"
    // subpackages of packageName:
    // - interfaces => "${packageName}.api"
    // - models => "${packageName}.model"
    packageName = "com.github.hauner.openapi"

    // show warnings from the open api parser.
    showWarnings = true
}
