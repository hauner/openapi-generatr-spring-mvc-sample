plugins {
    id 'java'
    id 'groovy'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'org.springframework.boot' version '2.1.7.RELEASE'
    id 'org.unbroken-dome.test-sets' version '2.1.1'

    // add generatr-gradle plugin
    id 'com.github.hauner.openapi-generatr' version '1.0.0.M4'
}

group = 'com.github.hauner'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral ()
}

testSets {
    testInt
}

dependencies {
    // 'openapiGeneratr' is a custom configuration that is used by the gradle plugin. It allows
    // to add multiple generatrs.
    openapiGeneratr 'com.github.hauner.openapi:openapi-generatr-spring:1.0.0.M4'
    openapiGeneratr 'com.github.hauner.openapi:openapi-generatr-json:1.0.0.M2'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
    testImplementation 'org.spockframework:spock-spring:1.3-groovy-2.5'
}

// configure the openapi-generatr-spring inside the 'openapiGeneratr' dsl block by adding a 'spring'
// (i.e the generatr name) block with the options for the generatr.
openapiGeneratr {

    // the path to the open api yaml file.
    apiPath "${projectDir}/src/api/openapi.yaml"

    // adding a generatr block will configure a gradle task with name "generate${name of generator}"
    // (in this case "generateSpring") to run the generatr.
    spring {
        // the destination folder for generating interfaces & models. This is the parent of the
        // {packageName} folder tree.
        targetDir "$projectDir/build/openapi"

        // either a type mapping yaml as string or a file name to a type mapping yaml. Note that
        // the yaml file name must end with either {@code .yaml} or {@code .yml}.
        // typeMappings = "$projectDir/mapping.yaml"

        // the root package of the generated interfaces/model. The package folder tree will be
        // created inside {targetDir}. Interfaces and models will be placed into the "api" and
        // "model" subpackages of packageName:
        // - interfaces => "${packageName}.api"
        // - models => "${packageName}.model"
        packageName "com.github.hauner.openapi"

        // show warnings from the open api parser.
        showWarnings true
    }

    json {
        targetDir "$buildDir/json"
    }

}

// add the targetDir of the generatr as additional source folder to java.
sourceSets {
    main {
        java {
            // add generated files
            srcDir 'build/openapi'
        }

        resources {
            srcDir "$buildDir/json"
        }
    }
}

// generate api before compiling
compileJava.dependsOn ('generateSpring')
processResources.dependsOn ('generateJson')

check.dependsOn testInt
